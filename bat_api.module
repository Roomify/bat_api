<?php

/**
 * API access to booking data for BAT
 */

use Roomify\Bat\Event\Event;
use Roomify\Bat\Calendar\Calendar;
use Roomify\Bat\Store\DrupalDBStore;
use Roomify\Bat\Unit\Unit;
use Drupal\bat_event_ui\FullCalendarEventFormatter;

/**
 * Implements hook_ctools_plugin_api().
 */
function bat_api_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "services" && $api == "services") {
    return array("version" => "3");
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function bat_api_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'bat_api' && $plugin_type == 'bat_unit_field_handler') {
    return 'plugins/bat_unit_field_handler';
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function bat_api_ctools_plugin_type() {
  return array(
    'bat_unit_field_handler' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_permission()
 */
function bat_api_permission() {
  return array(
    'access units index service' =>  array(
      'title' => t('Access units index service'),
      'description' => t('Access units index service.'),
    ),
    'access edit unit service' =>  array(
      'title' => t('Access edit unit service'),
      'description' => t('Access edit unit service.'),
    ),
    'access add unit service' =>  array(
      'title' => t('Access add unit service'),
      'description' => t('Access add unit service.'),
    ),
    'access units calendar index service' =>  array(
      'title' => t('Access units calendar index service'),
      'description' => t('Access units calendar index service.'),
    ),
    'access events index service' =>  array(
      'title' => t('Access events index service'),
      'description' => t('Access events index service.'),
    ),
    'access events calendar index service' =>  array(
      'title' => t('Access events calendar index service'),
      'description' => t('Access events calendar index service.'),
    ),
  );
}

/**
 * Implements hook_services_resources().
 */
function bat_api_services_resources() {
  $resources = array();

  $resources['units'] = array(
    'operations' => array(
      'index' => array(
        'callback' => 'bat_api_services_units_index',
        'help' => t('Returns an object containing units information.'),
        'access arguments' => array('access units index service'),
        'args'     => array(
          array(
            'name'         => 'ids',
            'type'         => 'string',
            'optional'     => TRUE,
            'default value' => '',
            'description'  => t('IDs'),
            'source'       => array('param' => 'ids'),
          ),
          array(
            'name'         => 'offset',
            'type'         => 'string',
            'optional'     => TRUE,
            'default value' => 0,
            'description'  => t('Result offset to start listing'),
            'source'       => array('param' => 'offset'),
          ),
          array(
            'name'         => 'limit',
            'type'         => 'string',
            'optional'     => TRUE,
            'default value' => 100,
            'description'  => t('Number of items to return'),
            'source'       => array('param' => 'limit'),
          ),
        ),
      ),
      'update' => array(
        'callback' => 'bat_api_services_edit_unit',
        'access arguments' => array('access edit unit service'),
        'help'     => t('Edit an existing Bookable Unit.'),
        'args'     => array(
          array(
            'name'         => 'unit_id',
            'type'         => 'integer',
            'description'  => t('Unit ID'),
            'source'       => array('path' => 0),
            'optional'     => FALSE,
          ),
          array(
            'name' => 'bat_unit',
            'type' => 'array',
            'description' => t('The unit data to update'),
            'source' => 'data',
            'optional' => FALSE,
          ),
        ),
      ),
    ),
    'actions' => array(
      'add' => array(
        'callback' => 'bat_api_services_add_unit',
        'access arguments' => array('access add unit service'),
        'help'     => t('Add a new Bookable Unit.'),
        'args'     => array(
          array(
            'name'         => 'name',
            'type'         => 'string',
            'description'  => t('Name'),
            'source'       => array('data' => 'name'),
            'optional'     => FALSE,
          ),
          array(
            'name'         => 'type',
            'type'         => 'string',
            'description'  => t('Type'),
            'source'       => array('data' => 'type'),
            'optional'     => FALSE,
          ),
          array(
            'name'         => 'status',
            'type'         => 'integer',
            'description'  => t('Published'),
            'source'       => array('data' => 'status'),
            'optional'     => FALSE,
          ),
        ),
      ),
    ),
  );

  $resources['units-calendar'] = array(
    'operations' => array(
      'index' => array(
        'callback' => 'bat_api_services_units_index_calendar',
        'help' => t('Returns an object containing units information.'),
        'access arguments' => array('access units calendar index service'),
        'args'     => array(
          array(
            'name'         => 'types',
            'type'         => 'string',
            'optional'     => TRUE,
            'default value' => '',
            'description'  => t('Types'),
            'source'       => array('param' => 'types'),
          ),
          array(
            'name'         => 'ids',
            'type'         => 'string',
            'optional'     => TRUE,
            'default value' => '',
            'description'  => t('IDs'),
            'source'       => array('param' => 'ids'),
          ),
          array(
            'name'         => 'offset',
            'type'         => 'string',
            'optional'     => TRUE,
            'default value' => 0,
            'description'  => t('Result offset to start listing'),
            'source'       => array('param' => 'offset'),
          ),
          array(
            'name'         => 'limit',
            'type'         => 'string',
            'optional'     => TRUE,
            'default value' => 100,
            'description'  => t('Number of items to return'),
            'source'       => array('param' => 'limit'),
          ),
        ),
      ),
    ),
  );

  $resources['events'] = array(
    'operations' => array(
      'index' => array(
        'callback' => 'bat_api_services_events_index',
        'help' => t('Returns an object containing events information.'),
        'access arguments' => array('access events index service'),
        'args'     => array(
          array(
            'name'         => 'unit_ids',
            'type'         => 'string',
            'description'  => t('Unit IDs'),
            'source'       => array('param' => 'unit_ids'),
            'optional'     => FALSE,
          ),
          array(
            'name'         => 'unit_types',
            'type'         => 'string',
            'description'  => t('Unit Types'),
            'source'       => array('param' => 'unit_types'),
            'optional'     => TRUE,
          ),
          array(
            'name'         => 'start_date',
            'type'         => 'string',
            'description'  => t('Start date'),
            'source'       => array('param' => 'start_date'),
            'optional'     => FALSE,
          ),
          array(
            'name'         => 'end_date',
            'type'         => 'string',
            'description'  => t('End date'),
            'source'       => array('param' => 'end_date'),
            'optional'     => FALSE,
          ),
          array(
            'name'         => 'event_types',
            'type'         => 'string',
            'description'  => t('Type'),
            'source'       => array('param' => 'event_types'),
            'optional'     => FALSE,
          ),
        ),
      ),
    ),
  );

  $resources['events-calendar'] = array(
    'operations' => array(
      'index' => array(
        'callback' => 'bat_api_services_events_index_calendar',
        'help' => t('Returns an object containing events information.'),
        'access arguments' => array('access events calendar index service'),
        'args'     => array(
          array(
            'name'         => 'unit_ids',
            'type'         => 'string',
            'description'  => t('Unit IDs'),
            'source'       => array('param' => 'unit_ids'),
            'optional'     => TRUE,
          ),
          array(
            'name'         => 'unit_types',
            'type'         => 'string',
            'description'  => t('Unit Types'),
            'source'       => array('param' => 'unit_types'),
            'optional'     => TRUE,
          ),
          array(
            'name'         => 'start',
            'type'         => 'string',
            'description'  => t('Start date'),
            'source'       => array('param' => 'start'),
            'optional'     => FALSE,
          ),
          array(
            'name'         => 'end',
            'type'         => 'string',
            'description'  => t('End date'),
            'source'       => array('param' => 'end'),
            'optional'     => FALSE,
          ),
          array(
            'name'         => 'event_types',
            'type'         => 'string',
            'description'  => t('Type'),
            'source'       => array('param' => 'event_types'),
            'optional'     => FALSE,
          ),
        ),
      ),
    ),
  );

  return $resources;
}

/**
 * Retrieve a list of units to use with Fullcalendar scheduler.
 *
 * @param $unit_types
 * @param $unit_ids
 * @param $offset
 * @param $limit
 */
function bat_api_services_units_index_calendar($unit_types, $unit_ids, $offset, $limit) {
  $ids = array_filter(explode(',', $unit_ids));
  $types = ($unit_types == 'all') ? array() : array_filter(explode(',', $unit_types));

  $query = db_select('bat_units', 'n')
            ->fields('n', array('unit_id', 'type_id', 'type', 'name'));
  if (!empty($ids)) {
    $query->condition('unit_id', $ids, 'IN');
  }
  if (!empty($types)) {
    $query->condition('type_id', $types, 'IN');
  }
  $query->orderBy('type');
  $query->range($offset, $limit);
  $bat_units = $query->execute()->fetchAll();

  $units = array();

  $childrens = array();

  foreach ($bat_units as $unit) {
    $childrens[$unit->type_id][] = array(
      'id' => 'S' . $unit->unit_id,
      'title' => $unit->name,
    );
  }

  foreach ($childrens as $type_id => $children) {
    $unit_type = bat_type_load($type_id);

    $units[] = array(
      'id' => $unit_type->type_id,
      'title' => $unit_type->name,
      'children' => $children,
    );
  }

  return $units;
}

/**
 * Retrieve a list of units.
 *
 * @param $unit_ids
 * @param $offset
 * @param $limit
 */
function bat_api_services_units_index($unit_ids, $offset, $limit) {
  $return = new stdClass();
  $return->sessid = session_id();

  ctools_include('plugins');
  $field_handlers = ctools_get_plugins('bat_api', 'bat_unit_field_handler');

  $ids = array_filter(explode(',', $unit_ids));

  $query = db_select('bat_units', 'n')
            ->fields('n', array('unit_id', 'type', 'name', 'language', 'status', 'uid'));
  if (!empty($ids)) {
    $query->condition('unit_id', $ids, 'IN');
  }
  $query->orderBy('unit_id');
  $query->range($offset, $limit);
  $bat_units = $query->execute()->fetchAll();

  $units = array();
  foreach ($bat_units as $unit) {
    $units[$unit->unit_id] = array(
      'properties' => array(
        'type' => $unit->type,
        'name' => $unit->name,
        'language' => $unit->language,
        'status' => $unit->status,
        'uid' => $unit->uid,
      ),
      'fields' => array(
      ),
    );

    foreach ($field_handlers as $handler) {
      $class = ctools_plugin_get_class($handler, 'handler');
      $object_handler = new $class(bat_unit_load($unit->unit_id));

      $field_type = $object_handler->getFieldType();
      $field_info = $object_handler->getFieldInfo();

      if (!empty($field_info)) {
        $units[$unit->unit_id]['fields'][$field_type] = $field_info;
      }
    }
  }

  $return->units = $units;

  return $return;
}

/**
 * Create a new unit.
 *
 * @param $name
 * @param $type
 * @param $status
 */
function bat_api_services_add_unit($name, $type, $status) {
  $return = new stdClass();
  $return->sessid = session_id();

  if (bat_unit_type_load($type) !== FALSE && $name != '') {
    $unit = bat_unit_create(
      array(
        'name' => $name,
        'type' => $type,
        'status' => $status,
        'uid' => 0,
        'created' => REQUEST_TIME,
        'changed' => REQUEST_TIME,
      )
    );

    bat_unit_save($unit);

    $return->unit_id = $unit->unit_id;
    $return->status = 1;
  }
  else {
    $return->status = 0;
  }

  return $return;
}

/**
 * Update an existing unit.
 *
 * @param $unit_id
 * @param $bat_unit_data
 */
function bat_api_services_edit_unit($unit_id, $bat_unit_data) {
  $return = new stdClass();
  $return->sessid = session_id();

  $unit = bat_unit_load($unit_id);

  if ($unit !== FALSE) {
    $unit->name = (isset($bat_unit_data['name'])) ? $bat_unit_data['name'] : $unit->name;
    $unit->default_state = (isset($bat_unit_data['default_state'])) ? $bat_unit_data['default_state'] : $unit->default_state;
    $unit->status = (isset($bat_unit_data['status'])) ? $bat_unit_data['status'] : $unit->status;
    $unit->uid = (isset($bat_unit_data['uid'])) ? $bat_unit_data['uid'] : $unit->uid;

    $unit->changed = REQUEST_TIME;

    bat_unit_save($unit);

    $return->status = 1;
  }
  else {
    $return->status = 0;
  }

  return $return;
}

/**
 * Retrieve a list of events.
 *
 * @param $unit_ids
 * @param $unit_types
 * @param $start_date
 * @param $end_date
 * @param $event_types
 */
function bat_api_services_events_index($unit_ids, $unit_types, $start_date, $end_date, $event_types) {
  $return = new stdClass();
  $return->sessid = session_id();

  $unit_types = array_filter(explode(',', $unit_types));

  $types = array_filter(explode(',', $event_types));

  $events_json = array();

  foreach ($types as $type) {
    $state_store = new DrupalDBStore($type, DrupalDBStore::BAT_STATE);

    $start_date_object = new DateTime($start_date);
    $end_date_object = new DateTime($end_date);

    $today = new DateTime();
    if (!user_access('view past availability information') && $today > $start_date_object) {
      if ($today > $end_date_object) {
        $return->events = array();
        return $return;
      }

      $start_date_object = $today;
    }

    $ids = explode(',', $unit_ids);

    $units = array();
    foreach ($ids as $id) {
      if ($bat_unit = bat_unit_load($id)) {
        if (in_array($bat_unit->type, $unit_types) || empty($unit_types)) {
          $units[] = new Unit($id, $bat_unit->getEventDefaultValue($type));
        }
      }
    }

    if (!empty($units)) {
      $rc = new Calendar($units, $state_store);
      $events = $rc->getEvents($start_date_object, $end_date_object);

      $event_formatter = new FullCalendarEventFormatter($type);

      foreach ($events as $unit_id => $unit_events) {
        foreach ($unit_events as $event) {
          $events_json[$type][$unit_id][] = $event->toJson($event_formatter);
        }
      }
    }
  }

  $return->events = $events_json;

  return $return;
}

/**
 * Retrieve a list of events to use with Fullcalendar scheduler.
 *
 * @param $unit_ids
 * @param $unit_types
 * @param $start_date
 * @param $end_date
 * @param $event_types
 */
function bat_api_services_events_index_calendar($unit_ids, $unit_types, $start_date, $end_date, $event_types) {
  $unit_types = ($unit_types == 'all') ? array() : array_filter(explode(',', $unit_types));

  $types = array_filter(explode(',', $event_types));

  $events_json = array();

  foreach ($types as $type) {
    // Get the event type definition from Drupal
    $bat_event_type = bat_event_type_load($type);

    // For each type of event create a state store and an event store
    $event_store = new DrupalDBStore($type, DrupalDBStore::BAT_EVENT);

    $start_date_object = new DateTime($start_date);
    $end_date_object = new DateTime($end_date);

    $today = new DateTime();
    if (!user_access('view past event information') && $today > $start_date_object) {
      if ($today > $end_date_object) {
        $return->events = array();
        return $return;
      }
      $start_date_object = $today;
    }

    $ids = array_filter(explode(',', $unit_ids));

    // Get all units for a given type
    $query = db_select('bat_units', 'n')
            ->fields('n', array('unit_id', 'type', 'name'));
    // and optionally limit to specific ids if defined in API call
    if (!empty($ids)) {
      $query->condition('unit_id', $ids, 'IN');
    }
    // and types
    if (!empty($unit_types)) {
      $query->condition('type_id', $unit_types, 'IN');
    }
    $query->orderBy('unit_id');
    $bat_units = $query->execute()->fetchAll();

    // Create an array of unit objects - the default value is set to 0 since we want
    // to know if the value in the database is actually 0. This will allow us to identify
    // which events are represented by events in the database (i.e. have a value different to 0)
    $units = array();
    foreach ($bat_units as $unit) {
      $units[] = new Unit($unit->unit_id, 0);
    }

    if (!empty($units)) {
      $event_calendar = new Calendar($units, $event_store);

      $event_ids = $event_calendar->getEvents($start_date_object, $end_date_object);

      //@TODO - this is an undeclared dependency of bat_event_ui
      $event_formatter = new FullCalendarEventFormatter($bat_event_type);

      foreach ($event_ids as $unit_id => $unit_events) {
        foreach ($unit_events as $key => $event) {
          $events_json[] = array(
            'id' => (string)$key . $unit_id,
            'bat_id' => $event->getValue(),
            'resourceId' => 'S' . $unit_id,
          ) + $event->toJson($event_formatter);
        }
      }
    }
  }

  return $events_json;
}
